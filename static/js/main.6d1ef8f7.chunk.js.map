{"version":3,"sources":["HeaderBar/Nav.jsx","HeaderBar/HeaderBar.jsx","Footer/Footer.jsx","Page/Page.jsx","App.js","serviceWorker.js","index.js"],"names":["MenuItem","props","isOpen","href","title","children","Nav","Component","constructor","super","toggleMenuOpen","this","setState","menuOpen","state","render","type","id","onChange","tabIndex","aria-haspopup","htmlFor","className","alt","src","HeaderBar","filterParagraph","rubric","filter","slug","troupe","role","year","upcoming","to","Footer","PlayDetails","lazy","Page","refresh","queryString","parse","window","location","search","getTroupeRubric","isPlayUpcoming","play","Date","getTime","epochLastPerformance","getDoesUpcomingFilterContainTrue","Array","isArray","includes","getFilteredPlays","jsonData","isInOeuvre","myRoles","byArraySlug","datesAsText","substr","reverse","componentDidMount","componentDidUpdate","prevProps","_","generateFilterParagraph","numPlays","maxNumPlays","length","roles","map","toLowerCase","join","generateRoleClause","years","generateYearClause","troupeFound","playFound","find","byArray","findIndex","troupeSlug","troupeIndex","name","generateTroupeClause","titles","generateSlugClause","generateUpcomingClause","filteredPlays","mappedPlays","index","key","slugHandler","troupeHandler","yearHandler","roleHandler","upcomingHandler","playIsUpcoming","mappedPlaysWithLazyLoading","fallback","clearFilter","App","basename","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d1ef8f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Nav.css';\r\nimport '../App.css';\r\n\r\n//// The menu-items should not be interactive when the menu is closed (or closing).\r\n//// This is achieved by rendering each item with an <a> element if the menu is open,\r\n//// and a <span> element if closed.\r\nconst MenuItem = (props) => {\r\n    if (props.isOpen) {\r\n        return <a href={props.href} title={props.title}>{props.children}</a>\r\n    }\r\n    else {\r\n        return <span>{props.children}</span>\r\n    }\r\n}\r\n\r\nclass Nav extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            menuOpen: false\r\n        }\r\n    }\r\n    toggleMenuOpen = () => {\r\n        this.setState({menuOpen: !this.state.menuOpen});\r\n    }\r\n\r\n    render() {\r\n        let menuOpen = this.state.menuOpen;\r\n        return (\r\n            <nav>\r\n                {/* Checkbox is visually hidden but operated via the label. \r\n                It determines whether the ul is hidden or not. */}\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id=\"nav-open-toggler\"\r\n                    onChange={this.toggleMenuOpen}\r\n                    tabIndex=\"0\"\r\n                    aria-haspopup=\"true\"\r\n                />\r\n                <label htmlFor=\"nav-open-toggler\" title=\"Open or close the nav menu\">\r\n                    <img className=\"header-icon\" alt=\"Duncan’s fulmar icon. Click to open or close the nav menu\" src=\"https://www.duncanritchie.co.uk/favicon-96x96.png\"/>\r\n                </label>\r\n                <ul>\r\n                    <li>\r\n                        <MenuItem isOpen={menuOpen} href=\"https://www.duncanritchie.co.uk/\" title=\"Duncan Ritchie’s portfolio\">Duncan Ritchie’s website</MenuItem>\r\n                    </li>\r\n                    <li>\r\n                        <MenuItem isOpen={menuOpen} href=\"https://www.github.com/DuncanRitchie/\" title=\"Duncan Ritchie — GitHub\">\r\n                            <i className=\"fab fa-github\"></i>My GitHub page\r\n                        </MenuItem>\r\n                    </li>\r\n                    <li>\r\n                        <MenuItem isOpen={menuOpen} href=\"https://www.linkedin.com/in/duncan-ritchie-uk/\" title=\"Duncan Ritchie — LinkedIn\">\r\n                            <i className=\"fab fa-linkedin\"></i>My LinkedIn page\r\n                        </MenuItem>\r\n                    </li>\r\n                    <li>\r\n                        <MenuItem isOpen={menuOpen} href=\"https://theatreinthequarter.co.uk/\" title=\"Theatre in the Quarter’s website\">\r\n                            Theatre in the Quarter’s website\r\n                        </MenuItem>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Nav from './Nav.jsx';\nimport './HeaderBar.css';\n\nconst HeaderBar = (props) => {\n    return (\n        <header>\n            <Nav />\n            <h1 className=\"header-heading\">My œuvre with Theatre in the Quarter and related groups</h1>\n            <p className=\"filter-paragraph\">\n                {props.filterParagraph}. {props.rubric}&ensp;\n                {props.filter.slug === \"\" && \n                props.filter.troupe === \"\" && \n                props.filter.role === \"\" && \n                props.filter.year === \"\" && \n                !props.filter.upcoming ? null :\n                <Link className=\"clear-filter\" title=\"Clear filter\" to=\"/?\">Clear filter</Link>}\n            </p>\n        </header>\n    )\n}\nexport default HeaderBar","import React from 'react';\nimport './Footer.css';\n\nconst Footer = (props) => {\n    return (\n        <footer>\n            <ul>\n                <li>\n                    Made by Duncan Ritchie using React.js.\n                </li>\n                <li>\n                    <a href=\"https://www.duncanritchie.co.uk\" title=\"Duncan Ritchie’s website\">My&nbsp;website</a>.\n                </li>\n                <li>\n                    <a href=\"https://theatreinthequarter.co.uk\" title=\"Theatre in the Quarter’s website\">TiQ’s&nbsp;website</a>.\n                </li>\n            </ul>\n        </footer>\n    )\n}\nexport default Footer","import React, { Component, lazy, Suspense } from 'react';\nimport queryString from \"query-string\";\nimport jsonData from \"../data.json\";\nimport HeaderBar from \"../HeaderBar/HeaderBar\";\nimport Footer from \"../Footer/Footer\";\nimport '../App.css';\nconst PlayDetails = lazy(() => import(\"../Play/PlayDetails\"));\n\nconst Loading = () => <section className=\"play-details\"><p>Loading...</p></section>;\n\nclass Page extends Component {\n    state = {\n        filter: {\n        }\n    }\n\n    refresh = () => {\n        this.setState({\n            filter: {\n                slug: queryString.parse(window.location.search).slug || \"\",\n                troupe: queryString.parse(window.location.search).troupe || \"\",\n                year: queryString.parse(window.location.search).year || \"\",\n                role: queryString.parse(window.location.search).role || \"\",\n                upcoming: queryString.parse(window.location.search).upcoming || false\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.refresh();\n    }\n\n    componentDidUpdate(prevProps, _) {\n        if (prevProps.location.search !== this.props.location.search)\n        {\n            this.refresh();\n        }\n    }\n\n    getTroupeRubric = () => {\n        const rubrics =  {\n            \"jigsaw-music-theatre\":          \"Jigsaw were founded in 1991 and now have about two dozen members aged seven to twelve.\",\n            \"quartz-youth-theatre\":          \"Established in 2013, Quartz are the arm of TiQ for teenage thespians, with around 22 current members.\",\n            \"rewind-youth-theatre\":          \"Rewind are primary-schoolchildren in the Chester suburb of Blacon, co-managed by TiQ and Cheshire Dance.\",\n            \"handbag-of-harmonies\":          \"A Handbag of Harmonies are a choir of several dozen women from the Chester area.\",\n            \"garden-quarter-association\":    \"The Garden Quarter is the suburb of Chester that TiQ are based in.\",\n            \"chester-mystery-plays-cast\":    \"The Chester Mystery Plays are a huge feat every five years to retell Bible stories at Chester Cathedral; individual plays have been reprised in the city’s amphitheatre.\",\n            \"theatre-in-the-quarter-adults\": \"TiQ was founded in 2005 to provide the residents of Chester with theatrical experiences alongside professional actors, as well as to run the children’s group Jigsaw (and later Quartz and Rewind).\"\n        };\n\n        let troupeSlug = this.state.filter.troupe;\n        return (rubrics[troupeSlug] || \"\");\n    }\n\n    isPlayUpcoming = (play) => {\n        const date = new Date().getTime() / 1000;\n        return date < play.epochLastPerformance;\n    }\n\n    //// Uses state to determine whether plays that are not upcoming should be filtered out.\n    //// If this.state.filter.upcoming is falsy, this method returns false and no “upcoming” filter will be set.\n    //// If this.state.filter.upcoming equals \"false\", this method returns false, and only plays that are NOT upcoming will be displayed.\n    //// If this.state.filter.upcoming equals or contains \"true\", this method returns true, and only upcoming plays will be displayed.\n    getDoesUpcomingFilterContainTrue = () => {\n        const upcoming = this.state.filter.upcoming;\n        if (Array.isArray(upcoming)) {\n            return upcoming.includes(\"true\");\n        }\n        else {\n            return upcoming && upcoming !== \"false\";\n        }\n    }\n\n    //// Returns an array of the plays that should be displayed.\n    getFilteredPlays = () => {\n        const { filter } = this.state;\n\n        const doesPlayMatchRole = (play) => {\n            if (Array.isArray(filter.role)) {\n                for (const role of filter.role) {\n                    if (play.myRoles.includes(role)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            else {\n                return play.myRoles.includes(filter.role);\n            }\n        }\n\n        const doesPlayMatchSlug = (play) => {\n            if (Array.isArray(filter.slug)) {\n                return filter.slug.includes(play.slug);\n            }\n            else {\n                return filter.slug === play.slug;\n            }\n        }\n\n        const doesPlayMatchTroupe = (play) => {\n            if (Array.isArray(filter.troupe)) {\n                for (const troupe of filter.troupe) {\n                    if (play.byArraySlug.includes(troupe)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            else {\n                return play.byArraySlug.includes(filter.troupe);\n            }\n        }\n\n        const doesPlayMatchUpcoming = (play) => {\n            return this.isPlayUpcoming(play) === this.getDoesUpcomingFilterContainTrue();\n        }\n\n        const doesPlayMatchYear = (play) => {\n            if (Array.isArray(filter.year)) {\n                return filter.year.includes(play.datesAsText.substr(0,4));\n            }\n            else {\n                return filter.year === play.datesAsText.substr(0,4);\n            }\n        }\n\n        return (jsonData\n            .filter(play => play.isInOeuvre)\n            .filter(this.state.filter.role     ? doesPlayMatchRole     : ()=>true)\n            .filter(this.state.filter.slug     ? doesPlayMatchSlug     : ()=>true)\n            .filter(this.state.filter.troupe   ? doesPlayMatchTroupe   : ()=>true)\n            .filter(this.state.filter.upcoming ? doesPlayMatchUpcoming : ()=>true)\n            .filter(this.state.filter.year     ? doesPlayMatchYear     : ()=>true)\n            .reverse()\n        );\n    }\n\n    // `generateFilterParagraph` includes several local functions\n    // that may be called in the final return statement.\n    generateFilterParagraph(numPlays) {\n        const maxNumPlays = jsonData.filter(play => play.isInOeuvre).length;\n\n        const generateFirstPartOfParagraph = () => {\n            if (numPlays === maxNumPlays) {\n                return `Showing all ${numPlays} items. Click a date, troupe, role, title, or “upcoming” sticker to set a filter`;\n            }\n            else if (numPlays > 1) {\n                return `Filtered to ${numPlays} productions`;\n            }\n            else if (numPlays === 1) {\n                return \"Filtered to one production\";\n            }\n            else {\n                return `Click “Clear filter” — there are no productions`;\n            }\n        }\n        \n        const generateRoleClause = () => {\n            let roles = this.state.filter.role\n            if (Array.isArray(this.state.filter.role)) {\n                roles = this.state.filter.role.map(role => {return role.toLowerCase()}).join(\" or \")\n            }\n            return ` where I was ${roles.toLowerCase()}`;\n        }\n\n        const generateYearClause = () => {\n            let years = this.state.filter.year\n            if (Array.isArray(years)) {\n                years = years.join(\" or \")\n            }\n            return ` performed in ${years}`;\n        }\n\n        const generateTroupeClause = () => {\n            let troupeFound = this.state.filter.troupe;\n            // This is what happens if the query is only one troupe.\n            let playFound = jsonData.find(play=>{\n                return play.byArraySlug.includes(this.state.filter.troupe)\n                });\n            if (playFound) {\n                troupeFound = playFound.byArray[playFound.byArraySlug.findIndex(troupe=>{return troupe===this.state.filter.troupe})]\n            }\n            // This is what happens if the query contains multiple troupes.\n            else if (Array.isArray(this.state.filter.troupe)) {\n                let troupeNamesArray = this.state.filter.troupe.map((troupeSlug)=>{\n                    if (jsonData.find(play=>{return play.byArraySlug.includes(troupeSlug)})) {\n                        playFound = jsonData.find(play=>{return play.byArraySlug.includes(troupeSlug)});\n                        let troupeIndex = playFound.byArraySlug.findIndex(troupe=>{return troupe===troupeSlug})\n                        let troupeName = playFound.byArray[troupeIndex]\n                        return (troupeName)\n                    }\n                    else {\n                        return null\n                    }\n                })\n                troupeFound = troupeNamesArray.filter((name)=>{return name!= null}).join(\" or \")\n            }\n            // Let’s add whatever we have for the troupes into filterParagraph\n            return ` by ${troupeFound}`;\n        }\n\n        const generateSlugClause = () => {\n            let titles = this.state.filter.slug\n            // If titles is a single slug in the Json data, the corresponding title is returned.\n            if (jsonData.find(play=>{return play.slug===titles})) {\n                titles = jsonData.find(play=>{return play.slug===titles}).title\n            }\n            // If titles is not a single slug, or not in the Json data...\n            else {\n                // If titles is an array of slugs, we want to return a title for every slug.\n                if (Array.isArray(titles)) {\n                    titles = titles.map(slug => {\n                        if (jsonData.find(play=>{return play.slug===slug})) {\n                            return jsonData.find(play=>{return play.slug===slug}).title\n                        }\n                        else {\n                            return null\n                        }\n                    }).filter(title=>{return title!=null}).join(\"” or “\")\n                }\n                // If titles is a single incorrect slug, we don’t do anything here.\n            }\n            return ` entitled “${titles}”`\n        }\n\n        const generateUpcomingClause = () => {\n            if (numPlays === maxNumPlays) {\n                return \"\";\n            }\n            else if (this.getDoesUpcomingFilterContainTrue()) {\n                return ` that ${numPlays===1 ? \"has\" : \"have\"} not been performed yet`\n            }\n            else {\n                return ` that ${numPlays===1 ? \"has\" : \"have\"} been performed`\n            }\n        }\n        \n        return (\n            generateFirstPartOfParagraph()\n            + (this.state.filter.role     ? generateRoleClause()     : \"\")\n            + (this.state.filter.year     ? generateYearClause()     : \"\")\n            + (this.state.filter.troupe   ? generateTroupeClause()   : \"\")\n            + (this.state.filter.slug     ? generateSlugClause()     : \"\")\n            + (this.state.filter.upcoming ? generateUpcomingClause() : \"\")\n        );\n    }\n\n    render() {\n        const filteredPlays = this.getFilteredPlays();\n        // Let’s calculate the number of plays to display.\n        const numPlays = filteredPlays.length;\n        // Generate the paragraph in the header describing the filter.\n        const filterParagraph = this.generateFilterParagraph(numPlays);\n        // Let’s create a PlayDetails element for every play.\n        let mappedPlays = filteredPlays.map((play, index) => {\n            return (\n                <PlayDetails \n                    key={index}\n                    play={play}\n                    slugHandler={this.slugHandler}\n                    troupeHandler={this.troupeHandler}\n                    yearHandler={this.yearHandler}\n                    roleHandler={this.roleHandler}\n                    upcomingHandler={this.upcomingHandler}\n                    playIsUpcoming={this.isPlayUpcoming(play)}\n                    numPlays={numPlays}\n                />\n            )\n        })\n        // Wrap a <Suspense> element around it to allow for a Loading state.\n        let mappedPlaysWithLazyLoading = <Suspense fallback={Loading()}>{mappedPlays}</Suspense>;\n        \n        // Let’s put everything together into Page.\n        return (\n            <div className=\"Page\">\n                <HeaderBar filter={this.state.filter} filterParagraph={filterParagraph} rubric={this.getTroupeRubric()} clearFilter={this.clearFilter}/>\n                <main>\n                    {mappedPlaysWithLazyLoading}\n                </main>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nexport default Page","import React, { Component } from 'react';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport Page from \"./Page/Page\"\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter basename=\"/tiq-oeuvre\">\n                <Route component={Page}/>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let’s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}